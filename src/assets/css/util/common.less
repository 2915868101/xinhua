@marginValues: 0 1 2 3 4 5 6 7 8 9 10 12 13 15 16 20 25 30 35 40 50 60 70;//f-mt f-mr f-mb f-ml
@paddingValues: 0 1 2 3 4 5 6 7 8 9 10 12 13 15 16 20 25 30 35 40 43 50 60 70;//f-pt f-pr f-pb f-pl
@flexValues: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24; //f-df
@fontSizeValues:8 9 10 11 12 13 14 15 16 17 18 20 22 23 24 25 26 28 30 32 34 36 38 40 42 100;//f-fs
@textIndentValues: 1 2 3 4 5 6;//f-ti
@fontColorValues: #fff #000 #222 #333 #444 #666 #777 #999 #303133 #606266 #909399 #7d888c #8b8b8b #6c6c6c #3b95fc #67c23a #e6a23c #f56c6c #f57852 #409eff #f30b32 #ffa54d #00c792 #c0c4cc #f4f9f9 #28b7a3 #646566 #969799 #3D98FF #323233 #1479FF #13C2C2 #FA8C16 #C8C9CC;//s-c
@backgroundColorValues: #fff #f8fcff #67c23a #e6a23c #f56c6c #409eff #f30b32 #ffa54d #00c792 #ffcb2c #c0c4cc #f4f9f9 #28b7a3 #E6F5FF #E6FFFB #FFF7E6;//s-bgc
@borderRadiusValues: 3 5 7 10 12 15 20;//f-br 
@borderRadiusPercentageValues: 50;//f-brp 百分比圆角
@widthValues: 20 22 30 40 45 50 60 70 80 90 100 110 120 130 140 150 160 170 180 200 210 220 230 240 260 300 350 360 400 450 500 550 600 800 900 1000 1100 1200;//g-w g-mw
@widthPercentageValues: 5 10 20 30 40 50 60 70 80 90 100;//g-wp 百分比宽度
@heightValues:0 10 20 30 40 50 60 70 80 90 100 120 150 160 180 200 260 300 400 450 500 550 600 650 700 750 800;//g-h g-mh
@heightPercentageValues: 100;//g-hp g-mhp 百分比高度
@lineHeightValues: 14 16 18 20 22 24 26 28 30 32 35 40 50;//f-lh
@textShadowValues: '2px 2px 3px rgba(0, 0, 0, 0.25)','2px 2px 5px rgba(0, 0, 0, 0.25)';//f-ts
@boxShadowValues: '5px 10px 10px #ddd','0 5px 5px #e9e9e9','0 3px 10px #eee','5px 10px 10px #0d4891','0 5px 5px #f8fcff';//f-bs
@opacityValues: 0 30 40 50 60 70 80 85 90 95 100;//f-o
@gradientValues: '#999,#fff' '#f00,#fff';//f-gt
@horizontalGradientValues: '#999,#fff' '#f00,#fff';//f-hgt
@transitionValues: 'width 1s ease, height 1s ease';//f-transition
@transformValues: 'rotateY(180deg)';//f-transform
@scaleValues: '0.75','2','0.75,2';//f-scale
@rotateValues: 45 90 180; //f-rotate
@skewValues: '-10deg,-10deg';//f-skew
@translateValues: '200px,50px';//f-translate
@translate3dValues: '-50%,-20%,0';//f-translate3d
@transformOriginValues: '30% 50%';//f-transform-origin
 
.margin-top (@string,@u:px) {
  margin-top: unit(@string, @u);
}
.margin-right (@string,@u:px) {
  margin-right: unit(@string, @u);
}
.margin-bottom (@string,@u:px) {
  margin-bottom: unit(@string, @u);
}
.margin-left (@string,@u:px) {
  margin-left: unit(@string, @u);
}
.margin-loop(@n:1,@v:extract(@marginValues, @n)) when (@n <= length(@marginValues)) {
  .f-mt@{v}{
    .margin-top(extract(@marginValues, @n));
  }
  .f-mr@{v}{
    .margin-right(extract(@marginValues, @n));
  }
  .f-mb@{v}{
    .margin-bottom(extract(@marginValues, @n));
  }
  .f-ml@{v}{
    .margin-left(extract(@marginValues, @n));
  }
  .margin-loop((@n + 1));
}
.margin-loop();

.padding-top (@string,@u:px) {
  padding-top: unit(@string, @u);
}
.padding-right (@string,@u:px) {
  padding-right: unit(@string, @u);
}
.padding-bottom (@string,@u:px) {
  padding-bottom: unit(@string, @u);
}
.padding-left (@string,@u:px) {
  padding-left: unit(@string, @u);
}
.padding-loop(@n:1,@v:extract(@paddingValues, @n)) when (@n <= length(@paddingValues)) {
  .f-pt@{v}{
    .padding-top(extract(@paddingValues, @n));
  }
  .f-pr@{v}{
    .padding-right(extract(@paddingValues, @n));
  }
  .f-pb@{v}{
    .padding-bottom(extract(@paddingValues, @n));
  }
  .f-pl@{v}{
    .padding-left(extract(@paddingValues, @n));
  }
  .padding-loop((@n + 1));
}
.padding-loop();

.flex-value (@num) {
  flex: @num;
}

.flex-loop(@n: 1, @v: extract(@flexValues, @n)) when (@n <=length(@flexValues)) {
  .f-df@{v} {
    .flex-value(extract(@flexValues, @n));
  }

  .flex-loop((@n + 1));
}

.flex-loop();

.font-size (@size,@u:px) {
  font-size: unit(@size, @u);
}
.font-size-loop(@n:1,@v:extract(@fontSizeValues, @n)) when (@n <= length(@fontSizeValues)) {
  .f-fs@{v}{
    .font-size(extract(@fontSizeValues, @n));
  }
  .font-size-loop((@n + 1));
}
.font-size-loop();

.text-indent (@size, @u: em) {
  text-indent: unit(@size, @u);
}

.text-indent-loop(@n: 1, @v: extract(@textIndentValues, @n)) when (@n <=length(@textIndentValues)) {
  .f-ti@{v} {
    .text-indent(extract(@textIndentValues, @n));
  }

  .text-indent-loop((@n + 1));
}

.text-indent-loop();

.font-color (@color) {
  color: @color;
}
.font-color-loop(@n:1,@v:extract(@fontColorValues, @n)) when (@n <= length(@fontColorValues)) {
  @c: replace(@v, '#', '');
  .s-c@{c}{
    .font-color(extract(@fontColorValues, @n));
  }
  .font-color-loop((@n + 1));
}
.font-color-loop();

.background-color (@color) {
  background-color: @color;
}
.background-color-loop(@n:1,@v:extract(@backgroundColorValues, @n)) when (@n <= length(@backgroundColorValues)) {
  @c: replace(@v, '#', '');
  .s-bgc@{c}{
    .background-color(extract(@backgroundColorValues, @n));
  }
  .background-color-loop((@n + 1));
}
.background-color-loop();

.border-radius (@radius,@u:px) {
  border-radius: unit(@radius, @u);
  -moz-border-radius: unit(@radius, @u);
  -webkit-border-radius: unit(@radius, @u);
}
.f-brh{
  .border-radius(50,%);
}
.border-radius-loop(@n:1,@v:extract(@borderRadiusValues, @n)) when (@n <= length(@borderRadiusValues)) {
  .f-br@{v}{
    .border-radius(extract(@borderRadiusValues, @n));
  }
  .border-radius-loop((@n + 1));
}
.border-radius-loop();

.border-radius-percentage (@radius,@u:%) {
  border-radius: unit(@radius, @u);
  -moz-border-radius: unit(@radius, @u);
  -webkit-border-radius: unit(@radius, @u);
}
.border-radius-percentage-loop(@n:1,@v:extract(@borderRadiusPercentageValues, @n)) when (@n <= length(@borderRadiusPercentageValues)) {
  .f-brp@{v}{
    .border-radius-percentage(extract(@borderRadiusPercentageValues, @n));
  }
  .border-radius-loop((@n + 1));
}
.border-radius-percentage-loop();

.width (@width,@u:px) {
  width: unit(@width, @u);
}
.min-width (@width,@u:px) {
  min-width: unit(@width, @u);
}
.width-loop(@n:1,@v:extract(@widthValues, @n)) when (@n <= length(@widthValues)) {
  .g-w@{v}{
    .width(extract(@widthValues, @n));
  }
  .g-mw@{v}{
    .min-width(extract(@widthValues, @n));
  }
  .width-loop((@n + 1));
}
.width-loop();
.width-percentage (@width,@u:%) {
  width: unit(@width, @u);
}
.width-percentage-loop(@n:1,@v:extract(@widthPercentageValues, @n)) when (@n <= length(@widthPercentageValues)) {
  .g-wp@{v}{
    .width-percentage(extract(@widthPercentageValues, @n));
  }
  .width-percentage-loop((@n + 1));
}
.width-percentage-loop();

.height (@height,@u:px) {
  height: unit(@height, @u);
}
.min-height (@height,@u:px) {
  min-height: unit(@height, @u);
}
.height-loop(@n:1,@v:extract(@heightValues, @n)) when (@n <= length(@heightValues)) {
  .g-h@{v}{
    .height(extract(@heightValues, @n));
  }
  .g-mh@{v}{
    .min-height(extract(@heightValues, @n));
  }
  .height-loop((@n + 1));
}
.height-loop();

.height-percentage (@height,@u:%) {
  height: unit(@height, @u);
}
.min-height-percentage (@height,@u:%) {
  min-height: unit(@height, @u);
}
.height-percentage-loop(@n:1,@v:extract(@heightPercentageValues, @n)) when (@n <= length(@heightPercentageValues)) {
  .g-hp@{v}{
    .height-percentage(extract(@heightPercentageValues, @n));
  }
  .g-mhp@{v}{
    .min-height-percentage(extract(@heightPercentageValues, @n));
  }
  .height-percentage-loop((@n + 1));
}
.height-percentage-loop();
.line-height (@lineHeight,@u:px) {
  line-height: unit(@lineHeight, @u);
}
.line-height-loop(@n:1,@v:extract(@lineHeightValues, @n)) when (@n <= length(@lineHeightValues)) {
  .f-lh@{v}{
    .line-height(extract(@lineHeightValues, @n));
  }
  .line-height-loop((@n + 1));
}
.line-height-loop();

.text-shadow (@string) {  
    text-shadow: @string;  
}
.text-shadow-loop(@n:1) when (@n <= length(@textShadowValues)) {
  .f-ts@{n}{
    .text-shadow(e(extract(@textShadowValues, @n)));
  }
  .text-shadow-loop((@n + 1));
}
.text-shadow-loop();

.box-shadow (@string) {  
    -webkit-box-shadow: @string;  
    -moz-box-shadow:    @string;  
    box-shadow:         @string;  
} 
.box-shadow-loop(@n:1) when (@n <= length(@boxShadowValues)) {
  .f-bs@{n}{
    .box-shadow(e(extract(@boxShadowValues, @n)));
  }
  .box-shadow-loop((@n + 1));
}
.box-shadow-loop();

.opacity (@opacity) {  
    @tempOpacity: @opacity;  
    -webkit-opacity:    @opacity/100;  
    -moz-opacity:       @opacity/100;  
    opacity:            @opacity/100;  
    filter:alpha(opacity=@tempOpacity);  
} 
.opacity-loop(@n:1,@v:extract(@opacityValues, @n)) when (@n <= length(@opacityValues)) {
  .f-o@{v}{
    .opacity(extract(@opacityValues, @n));
  }
  .opacity-loop((@n + 1));
}
.opacity-loop();

.splitColor(@colors){
    @cccccccc1: replace(@colors,"\,\S",' ');
    @ccccccc1: replace(@cccccccc1," \S",' ');
    @cccccc1: replace(@ccccccc1," \S",' ');
    @ccccc1: replace(@cccccc1," \S",' ');
    @cccc1: replace(@ccccc1," \S",' ');
    @ccc1: replace(@cccc1," \S",' ');
    @cc1: replace(@ccc1," \S",'');
    @c1: replace(@cc1," ",'');
    @cccccccc2: replace(@colors,"\S\,",' ');
    @ccccccc2: replace(@cccccccc2,"\S ",' ');
    @cccccc2: replace(@ccccccc2,"\S ",' ');
    @ccccc2: replace(@cccccc2,"\S ",' ');
    @cccc2: replace(@ccccc2,"\S ",' ');
    @ccc2: replace(@cccc2,"\S ",' ');
    @cc2: replace(@ccc2,"\S ",' ');
    @c2: replace(@cc2," ",'');
    @startColor: e(@c1);
    @endColor: e(@c2);
}

.gradient (@colors) {  
    .splitColor(@colors);
    background-color: @startColor;  
    background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));  
    background: -webkit-linear-gradient(top, @startColor, @endColor);  
    background: -moz-linear-gradient(top, @startColor, @endColor);  
    background: -ms-linear-gradient(top, @startColor, @endColor);  
    background: -o-linear-gradient(top, @startColor, @endColor);  
} 
.gradient-loop(@n:1) when (@n <= length(@gradientValues)) {
  .f-gt@{n}{
    .gradient(extract(@gradientValues,@n));
  }
  .gradient-loop((@n + 1));
}
.gradient-loop();

.horizontal-gradient (@colors) {
    .splitColor(@colors);
    background-color: @startColor;  
    background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));  
    background-image: -webkit-linear-gradient(left, @startColor, @endColor);  
    background-image: -moz-linear-gradient(left, @startColor, @endColor);  
    background-image: -ms-linear-gradient(left, @startColor, @endColor);  
    background-image: -o-linear-gradient(left, @startColor, @endColor);  
    background-image: linear-gradient(left, @startColor, @endColor);  
}
.horizontal-gradient-loop(@n:1) when (@n <= length(@horizontalGradientValues)) {
  .f-hgt@{n}{
    .horizontal-gradient(extract(@horizontalGradientValues,@n));
  }
  .horizontal-gradient-loop((@n + 1));
}
.horizontal-gradient-loop();

.transition (@string) {  
    -webkit-transition: @string;    
    -moz-transition:    @string;  
    -ms-transition:     @string;   
    -o-transition:      @string;  
    transition:         @string;  
}  
.transition-loop(@n:1) when (@n <= length(@transitionValues)) {
  .f-transition@{n}{
    .transition(e(extract(@transitionValues, @n)));
  }
  .transition-loop((@n + 1));
}
.transition-loop();

.transform(@string){  
    -webkit-transform:   @string;  
    -moz-transform:      @string;  
    -ms-transform:       @string;  
    -o-transform:        @string;  
    transform:           @string;  
} 
.transform-loop(@n:1) when (@n <= length(@transformValues)) {
  .f-transform@{n}{
    .transform(e(extract(@transformValues, @n)));
  }
  .transform-loop((@n + 1));
}
.transform-loop();

.scale (@scale) {  
    -webkit-transform:   scale(@scale);  
    -moz-transform:      scale(@scale);  
    -ms-transform:       scale(@scale);  
    -o-transform:        scale(@scale);  
    transform:           scale(@scale);  
} 
.scale-loop(@n:1) when (@n <= length(@scaleValues)) {
  .f-scale@{n}{
    .scale(e(extract(@scaleValues, @n)));
  }
  .scale-loop((@n + 1));
}
.scale-loop();

.rotate (@deg) {  
    -webkit-transform:   rotate(unit(@deg, deg));  
    -moz-transform:      rotate(unit(@deg, deg));  
    -ms-transform:       rotate(unit(@deg, deg));  
    -o-transform:        rotate(unit(@deg, deg));  
    transform:           rotate(unit(@deg, deg));  
}  
.rotate-loop(@n:1) when (@n <= length(@rotateValues)) {
  .f-rotate@{n}{
    .rotate(extract(@rotateValues, @n));
  }
  .rotate-loop((@n + 1));
}
.rotate-loop();

.skew (@deg) {  
    -webkit-transform:   skew(@deg);  
    -moz-transform:      skew(@deg);  
    -ms-transform:       skew(@deg);  
    -o-transform:        skew(@deg);  
    transform:           skew(@deg);  
}  
.skew-loop(@n:1) when (@n <= length(@skewValues)) {
  .f-skew@{n}{
    .skew(e(extract(@skewValues, @n)));
  }
  .skew-loop((@n + 1));
}
.skew-loop();

.translate (@string) {  
    -webkit-transform:   translate(@string);  
    -moz-transform:      translate(@string);  
    -ms-transform:       translate(@string);  
    -o-transform:        translate(@string);  
    transform:           translate(@string);  
} 
.translate-loop(@n:1) when (@n <= length(@translateValues)) {
  .f-translate@{n}{
    .translate(e(extract(@translateValues, @n)));
  }
  .translate-loop((@n + 1));
}
.translate-loop();

.translate3d (@string) {  
    -webkit-transform:   translate3d(@string);  
    -moz-transform:      translate3d(@string);  
    -ms-transform:       translate3d(@string); 
    -o-transform:        translate3d(@string); 
    transform:           translate3d(@string);  
}  
.translate3d-loop(@n:1) when (@n <= length(@translate3dValues)) {
  .f-translate3d@{n}{
    .translate3d(e(extract(@translate3dValues, @n)));
  }
  .translate3d-loop((@n + 1));
}
.translate3d-loop();

.transform-origin (@string) {  
    -webkit-transform-origin: @string;  
    -moz-transform-origin:    @string;  
    -ms-transform-origin:     @string;  
    -o-transform-origin:      @string;  
    transform-origin:         @string;  
}   
.transform-origin-loop(@n:1) when (@n <= length(@transformOriginValues)) {
  .f-transform-origin@{n}{
    .transform-origin(e(extract(@transformOriginValues, @n)));
  }
  .transform-origin-loop((@n + 1));
}
.transform-origin-loop();